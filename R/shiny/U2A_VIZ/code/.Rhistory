(
)
origin = as.character(centres[sample(1:nrow(centres),1),][["Adresse"]])
destination = as.character(shop[sample(1:nrow(shop),1),][["result_address"]])
u1 <- urldirect(origin, destination)
doc1 <- getURL(u1)
a = fromJSON(u1, simplifyVector = F)
### FUNCTIONS TO QUERY THE DIRECTIONS AND DISTANCE GOOGLE MAP API
require(curl)
require(jsonlite)
require(plyr)
require(RCurl)
key = "AIzaSyCQJQipEWIgTkjze3WWaWzI9JyfcaAxyF8"
load("~/Desktop/croixrouge/R/shiny/U2A_VIZ/data/nearest_shops.RData")
origin = as.character(centres[sample(1:nrow(centres),1),][["Adresse"]])
destination = as.character(shop[sample(1:nrow(shop),1),][["result_address"]])
u1 <- urldirect(origin, destination)
####################### DISTANCE #######################
urldist <- function(origins, destinations, return.call = "json") {
root <- "https://maps.googleapis.com/maps/api/distancematrix/"
u <- paste(root, return.call, "?origins=", origins, "&destinations=", destinations, "&key=", key, sep = "")
return(URLencode(u))
}
getDistance <- function(origins, destinations,verbose=FALSE) {
u <- urldist(origin, destination)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
### VALEUR DE RETOUR
if(x$status=="OK")
{
dist = x$rows[[1]]$elements[[1]]$distance$text
time = x$rows[[1]]$elements[[1]]$duration$text
return(c(dist,time))
}
else
{
return(c(NA,NA))
}
}
####################### DIRECTIONS #######################
urldirect <- function(origin, destination, return.call = "json") {
root <- "https://maps.googleapis.com/maps/api/directions/"
u <- paste(root, return.call, "?origin=", origin, "&destination=", destination, "&key=", key,sep = "")
return(URLencode(u))
}
getDirection <- function(origin, destination,verbose=FALSE) {
u <- urldirect(origin, destination)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
print(x)
if(x$status=="OK")
{
return(x)
}
else
{
return(c(NA,NA))
}
}
origin = as.character(centres[sample(1:nrow(centres),1),][["Adresse"]])
destination = as.character(shop[sample(1:nrow(shop),1),][["result_address"]])
u1 <- urldirect(origin, destination)
doc1 <- getURL(u1)
a = fromJSON(u1, simplifyVector = F)
a
a = getDirection(origin, destination)
b = getDistance(origin, destination)
a = getDirection(origin, destination)
urldist(origin, destination)
urldirect(origin, destination)
a = getDirection(origin, destination)
?fromJSON
fromJSON(a, simplifyVector = F)
a = urldist(origin, destination)
fromJSON(a, simplifyVector = F)
fromJSON(b, simplifyVector = F)
b = urldirect(origin, destination)
fromJSON(b, simplifyVector = F)
urldist <- function(origin, destination, return.call = "json") {
root <- "https://maps.googleapis.com/maps/api/distancematrix/"
u <- paste(root, return.call, "?origins=", origin, "&destinations=", destination, "&key=", key, sep = "")
return(URLencode(u))
}
getDistance <- function(origin, destination,verbose=FALSE) {
u <- urldist(origin, destination)
x <- fromJSON(u, simplifyVector = F)
### VALEUR DE RETOUR
if(x$status=="OK")
{
dist = x$rows[[1]]$elements[[1]]$distance$text
time = x$rows[[1]]$elements[[1]]$duration$text
return(c(dist,time))
}
else
{
return(c(NA,NA))
}
}
####################### DIRECTIONS #######################
urldirect <- function(origin, destination, return.call = "json") {
root <- "https://maps.googleapis.com/maps/api/directions/"
u <- paste(root, return.call, "?origin=", origin, "&destination=", destination, "&key=", key,sep = "")
return(URLencode(u))
}
getDirection <- function(origin, destination,verbose=FALSE) {
u <- urldirect(origin, destination)
x <- fromJSON(u, simplifyVector = F)
print(x)
if(x$status=="OK")
{
return(x)
}
else
{
return(c(NA,NA))
}
}
origin = as.character(centres[sample(1:nrow(centres),1),][["Adresse"]])
destination = as.character(shop[sample(1:nrow(shop),1),][["result_address"]])
a = urldist(origin, destination)
b = urldirect(origin, destination)
fromJSON(b, simplifyVector = F)
a = getDirection(origin, destination)
b = getDistance(origin, destination)
b
b
b
?assert
?stopifnot
rm(list = ls())
### FIND THE 2 CLOSEST SHOPS TO EACH CROIX ROUGE CENTER
require(leaflet)
require(data.table)
library(colorspace)
library(sp)
require(rgeos)
require(FNN)
source("/home/selim/Desktop/croixrouge/R/tools/exp_tools.R")
source("/home/selim/Desktop/croixrouge/R/tools/gmapapi.R")
#load center and shop data. keep only commercial centers which were successfully geocoded
centres = read.csv("/home/selim/Desktop/SHINY_CR/adresse_U2A.geocoded.codeinsee.csv")
shop = read.csv("/home/selim/Desktop/SHINY_CR/enseignes_france.csv")
shop = shop[!is.na(shop$latitude),]
source("/home/selim/Desktop/croixrouge/R/tools/exp_tools.R")
source("/home/selim/Desktop/croixrouge/R/tools/gmapapi.R")
#load center and shop data. keep only commercial centers which were successfully geocoded
centres = read.csv("/home/selim/Desktop/croixrouge/R/shiny/U2A_VIZ/data/adresse_U2A.geocoded.codeinsee.csv")
shop = read.csv("/home/selim/Desktop/croixrouge/R/shiny/U2A_VIZ/data/enseignes_france.csv")
shop = shop[!is.na(shop$latitude),]
#find the 2 closest shops (vol d'oiseau) to each center
near = knnx.index(shop[, c("latitude","longitude")], centres[, c("latitude","longitude")], k = 2)
#table were the results will be stocked
table = data.frame(centre = centres$Code.U2A,
coord_c = paste(centres$latitude,centres$longitude, sep = ','),
ind_shop1 = near[,1],
ind_shop2 = near[,2],
coord_s1 = paste(shop[near[,1],]$latitude,shop[near[,1],]$longitude, sep = ','),
coord_s2 = paste(shop[near[,2],]$latitude,shop[near[,2],]$longitude, sep = ','))
table
View(table)
#get distance and time to the two closest shops using the google API
t1 = character()
t2 = character()
d1 = character()
d2 = character()
for(i in 1:nrow(table))
{
print(paste(i,nrow(table), sep = "/"))
#shop 1
origin = as.character(table[i,]$coord_c)
destination = as.character(table[i,]$coord_s1)
ret = getDistance(origin, destination)
t1 = c(t1, ret[2])
d1 = c(d1, ret[1])
#shop 2
origin = as.character(table[i,]$coord_c)
destination = as.character(table[i,]$coord_s2)
ret = getDistance(origin, destination)
t2 = c(t2, ret[2])
d2 = c(d2, ret[1])
}
View(centres)
shiny::runApp('~/Desktop/croixrouge/R/shiny/U2A_VIZ')
shiny::runApp('~/Desktop/croixrouge/R/shiny/U2A_VIZ')
shiny::runApp('~/Desktop/croixrouge/R/shiny/U2A_VIZ')
shiny::runApp('~/Desktop/croixrouge/R/shiny/U2A_VIZ')
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
require(shinyapps)
shiny::runApp('~/Desktop/croixrouge/R/shiny/U2A_VIZ')
shinyapps::setAccountInfo(name='selimr', token='C77BDD16A7E98F57E886BFB5C5F731C2', secret='jMkBIwhJjgVNfpLmpg7iyls+BlIfeGDzUhwpBAkV')
shinyapps::deployApp('.')
runApp()
getwd()
print(getwd())
load("data/nearest_shops.RData")
